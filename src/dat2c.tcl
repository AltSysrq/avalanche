#! /usr/bin/env tclsh8.6

# Converts the content of stdin to a C source file on stdout. The C code
# defines two externally-accessible symbols, where $NAME is given by the first
# command-line argument:
#   const size_t ${NAME}_size;
#   const char*const ${NAME}_data;
#
# This is used to embed fundamental drivers (eg, the various ISA builds) and
# the standard library into the runtime library, so that the lower-level parts
# of the runtime need not know how to find particular files, since that would
# otherwise complicate development.

set COLS 70
scan "\a\b\f\r\n\t\v\"\\" %c%c%c%c%c%c%c%c%c ESA ESB ESF ESR ESN EST ESV QUOT BS

set name [lindex $argv 0]

fconfigure stdin -translation binary
set data [read stdin]

puts {
/* This file was generated by dat2c.tcl.
 * Do not edit.
 */
#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include <stdlib.h>
}

puts "const size_t ${name}_size = [string length $data];"
puts "const char*const ${name}_data ="

set line ""
for {set i 0} {$i < [string length $data]} {incr i} {
  scan [string index $data $i] %c ch

  if {$ch == $ESA} {
    append line "\\a"
  } elseif {$ch == $ESB} {
    append line "\\b"
  } elseif {$ch == $ESF} {
    append line "\\f"
  } elseif {$ch == $ESR} {
    append line "\\r"
  } elseif {$ch == $ESN} {
    append line "\\n"
  } elseif {$ch == $EST} {
    append line "\\t"
  } elseif {$ch == $ESV} {
    append line "\\v"
  } elseif {$ch < 0x20 || $ch >= 0x7F} {
    append line [format "\\%03o" $ch]
  } elseif {$ch == $BS || $ch == $QUOT} {
    append line [format "\\%c" $ch]
  } else {
    append line [string index $data $i]
  }

  if {[string length $line] >= $COLS} {
    puts "\"$line\""
    set line {}
  }
}

puts "\"$line\";"
